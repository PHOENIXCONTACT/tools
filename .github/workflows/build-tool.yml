name: Build

on:
  workflow_call:
    inputs:
      dotnet_sdk_version:
        required: true
        type: string
      REPOSITORY_NAME:
        required: true
        type: string
 
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node version
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet_sdk_version }}

      - name: Clean
        run: dotnet clean && dotnet nuget locals all --clear

      - name: Execute dotnet restore
        run: dotnet restore

      - name: Execute dotnet build
        if: ${{ !(startsWith(github.ref, 'refs/tags/v')) }}
        run: |
          ASSEMBLY_VERSION="$(cat VERSION)"
          ASSEMBLY_VERSION="${ASSEMBLY_VERSION%%.*}".0.0.0
          echo "ASSEMBLY_VERSION = ${ASSEMBLY_VERSION}"
          FILE_VERSION="$(cat VERSION)"."${{github.run_number}}"
          echo "FILE_VERSION = ${FILE_VERSION}"
          INFORMATIONAL_VERSION="$(cat VERSION)"-"${{github.ref_name}}"."${{github.run_number}}"
          echo "INFORMATIONAL_VERSION = ${INFORMATIONAL_VERSION}"
          dotnet build --configuration Release --no-restore -p:AssemblyVersion=$ASSEMBLY_VERSION -p:FileVersion=$FILE_VERSION -p:InformationalVersion=$INFORMATIONAL_VERSION
        
        
      - name: Execute dotnet build (Release) 
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          ASSEMBLY_VERSION="${{github.ref_name}}"
          ASSEMBLY_VERSION="${ASSEMBLY_VERSION#v}"
          ASSEMBLY_VERSION="${ASSEMBLY_VERSION%%.*}".0.0.0
          echo "ASSEMBLY_VERSION = ${ASSEMBLY_VERSION}"
          FILE_VERSION="$(cat VERSION)"."${{github.run_number}}"
          echo "FILE_VERSION = ${FILE_VERSION}"
          INFORMATIONAL_VERSION="$(cat VERSION)"-"${{github.ref_name}}"."${{github.run_number}}"
          echo "INFORMATIONAL_VERSION = ${INFORMATIONAL_VERSION}"
          dotnet build --configuration Release --no-restore -p:AssemblyVersion=$ASSEMBLY_VERSION -p:FileVersion=$FILE_VERSION -p:InformationalVersion=$INFORMATIONAL_VERSION
        
        
      - name: Execute dotnet pack with release version
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          RELEASE_VERSION="${{github.ref_name}}"
          RELEASE_VERSION="${RELEASE_VERSION#v}"
          echo "RELEASE_VERSION = ${RELEASE_VERSION}"
          dotnet pack --configuration Release --no-build --no-restore --output artifacts/packages -p:PackageVersion=$RELEASE_VERSION
         
        
      - name: Execute dotnet pack with production version (dev or future)
        if: ${{ github.ref_name == 'dev' || github.ref_name == 'future' || startsWith(github.ref, '/refs/heads/rc/')}}
        run: |
          PRODUCTION_VERSION="$(cat VERSION)"-"${{github.ref_name}}"."${{github.run_number}}"
          echo "PRODUCTION_VERSION = ${PRODUCTION_VERSION}"
          dotnet pack --configuration Release --no-build --no-restore --output artifacts/packages -p:PackageVersion=$PRODUCTION_VERSION
        
      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{inputs.REPOSITORY_NAME}}-packages
          path: artifacts/packages/
          retention-days: 1
